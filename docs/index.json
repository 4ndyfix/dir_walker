{"repository_name":"dir_walker","body":"![](walker.png)\n\n# dir_walker\n\nThe `Dir::Walker` module supports the top-down traversal of a set of directories.\nIt is similar to the standard method `Dir.glob(\"**/*\")`, but has additional features like skip specific subdirectories, change the sort-oder of directory-listing (default: by name) or optionally ignore errors (IO::Error).\n\nThe sourcecode is a port of the Ruby standard lib `Find`.\n\nThe feature generally is also available in many other languages. Examples are:\n```\n* Find.find(...)       # Ruby\n* os.walk(...)         # Python\n* File::Find.find(...) # Perl\n* filepath.Walk(...)   # Go\n```\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  dir_walker:\n    github: 4ndyfix/dir_walker\n```\n\n2. Run `shards install`\n\n## Usage\n\nFor example, to total the size of all files under your home directory,\nignoring anything in a \"dot\" directory (e.g. $HOME/.ssh):\n\n```crystal\nrequire \"dir_walker\"\n  \ntotal_size : Int64 = 0\n  \nDir::Walker.walk(ENV[\"HOME\"]) do |path|\n  if File.directory? path\n    if File.basename(path).starts_with?(\".\")\n      Dir::Walker.prune_path # Don't look any further into this directory.\n    end\n  else\n    total_size += File.size(path)\n  end\nend\n  \nputs total_size.humanize\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/4ndyfix/dir_walker/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [4ndyfix](https://github.com/4ndyfix) - creator and maintainer\n","program":{"html_id":"dir_walker/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"dir_walker","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"dir_walker/Dir","path":"Dir.html","kind":"class","full_name":"Dir","name":"Dir","abstract":false,"superclass":{"html_id":"dir_walker/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"dir_walker/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"dir_walker/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"dir_walker/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"dir_walker/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"dir_walker","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"dir_walker/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"dir_walker/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Objects of class `Dir` are directory streams representing directories in the underlying file system.\nThey provide a variety of ways to list directories and their contents.\n\nThe directory used in these examples contains the two regular files (`config.h` and `main.rb`),\nthe parent directory (`..`), and the directory itself (`.`).\n\nSee also: `File`.","summary":"<p>Objects of class <code><a href=\"Dir.html\">Dir</a></code> are directory streams representing directories in the underlying file system.</p>","class_methods":[{"id":"find(*dirs:String,sort_proc=Walker::DEFAULT_SORT_PROC,ignore_error=false,&block:String->)-class-method","html_id":"find(*dirs:String,sort_proc=Walker::DEFAULT_SORT_PROC,ignore_error=false,&block:String->)-class-method","name":"find","doc":"shortcut or alias for `Dir::Walker::walk`","summary":"<p>shortcut or alias for <code><a href=\"Dir/Walker.html\">Dir::Walker</a>::walk</code></p>","abstract":false,"args":[{"name":"dirs","doc":null,"default_value":"","external_name":"dirs","restriction":"String"},{"name":"sort_proc","doc":null,"default_value":"Walker::DEFAULT_SORT_PROC","external_name":"sort_proc","restriction":""},{"name":"ignore_error","doc":null,"default_value":"false","external_name":"ignore_error","restriction":""}],"args_string":"(*dirs : String, sort_proc = <span class=\"t\">Walker</span><span class=\"t\">::</span><span class=\"t\">DEFAULT_SORT_PROC</span>, ignore_error = <span class=\"n\">false</span>, &block : String -> )","source_link":null,"def":{"name":"find","args":[{"name":"dirs","doc":null,"default_value":"","external_name":"dirs","restriction":"String"},{"name":"sort_proc","doc":null,"default_value":"Walker::DEFAULT_SORT_PROC","external_name":"sort_proc","restriction":""},{"name":"ignore_error","doc":null,"default_value":"false","external_name":"ignore_error","restriction":""}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String -> )"},"return_type":"","visibility":"Public","body":"Dir::Walker.walk(*dirs, sort_proc: sort_proc, ignore_error: ignore_error, &block)"}},{"id":"prune_path-class-method","html_id":"prune_path-class-method","name":"prune_path","doc":"shortcut or alias for `Dir::Walker.prune_path`","summary":"<p>shortcut or alias for <code><a href=\"Dir/Walker.html#prune_path-instance-method\">Dir::Walker.prune_path</a></code></p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"prune_path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Dir::Walker.prune_path"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"dir_walker/Dir/Walker","path":"Dir/Walker.html","kind":"module","full_name":"Dir::Walker","name":"Walker","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"dir_walker","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_SORT_PROC","name":"DEFAULT_SORT_PROC","value":"Proc(String, String, Int32).new do |path1, path2|\n  path1 <=> path2\nend","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"dir_walker/Dir/Walker","kind":"module","full_name":"Dir::Walker","name":"Walker"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"dir_walker/Dir","kind":"class","full_name":"Dir","name":"Dir"},"doc":"\nThe `Dir::Walker` module supports the top-down traversal of a set of directories.\n\nFor example, to total the size of all files under your home directory,\nignoring anything in a \"dot\" directory (e.g. $HOME/.ssh):\n\n```code\nrequire \"dir_walker\"\n\ntotal_size : Int64 = 0\n\nDir::Walker.walk(ENV[\"HOME\"]) do |path|\n  if File.directory? path\n    if File.basename(path).starts_with?(\".\")\n      Dir::Walker.prune_path # Don't look any further into this directory.\n    end\n  else\n    total_size += File.size(path)\n  end\nend\n\nputs total_size.humanize\n```","summary":"<p>The <code><a href=\"../Dir/Walker.html\">Dir::Walker</a></code> module supports the top-down traversal of a set of directories.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"prune_path-instance-method","html_id":"prune_path-instance-method","name":"prune_path","doc":"Skips the current file or directory, restarting the loop with the next\nentry. If the current file is a directory, that directory will not be\ntraversaly entered.\n\nSee the `Find` module documentation for an example.\n","summary":"<p>Skips the current file or directory, restarting the loop with the next entry.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"prune_path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(Walker::Prune.new)"}},{"id":"walk(*dirs:String,sort_proc=DEFAULT_SORT_PROC,ignore_error=false,&block:String->)-instance-method","html_id":"walk(*dirs:String,sort_proc=DEFAULT_SORT_PROC,ignore_error=false,&block:String->)-instance-method","name":"walk","doc":"Calls the associated block with the path of every file and directory listed\nas arguments, then traversaly on their subdirectories, and so on.\nOptionally an alternative *sort_proc* per directory listing can be used.\nErrors can be ignored also optionally.\nSee the `Dir::Walker` module documentation for an example.\n","summary":"<p>Calls the associated block with the path of every file and directory listed as arguments, then traversaly on their subdirectories, and so on.</p>","abstract":false,"args":[{"name":"dirs","doc":null,"default_value":"","external_name":"dirs","restriction":"String"},{"name":"sort_proc","doc":null,"default_value":"DEFAULT_SORT_PROC","external_name":"sort_proc","restriction":""},{"name":"ignore_error","doc":null,"default_value":"false","external_name":"ignore_error","restriction":""}],"args_string":"(*dirs : String, sort_proc = <span class=\"t\">DEFAULT_SORT_PROC</span>, ignore_error = <span class=\"n\">false</span>, &block : String -> )","source_link":null,"def":{"name":"walk","args":[{"name":"dirs","doc":null,"default_value":"","external_name":"dirs","restriction":"String"},{"name":"sort_proc","doc":null,"default_value":"DEFAULT_SORT_PROC","external_name":"sort_proc","restriction":""},{"name":"ignore_error","doc":null,"default_value":"false","external_name":"ignore_error","restriction":""}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String -> )"},"return_type":"","visibility":"Public","body":"dirs.to_a.map! do |d|\n  if Dir.exists?(d)\n  else\n    raise(File::NotFoundError.new(\"Dir not found\", file: d))\n  end\n  d.dup\nend.each do |dir|\n  ary = [dir]\n  while path = ary.shift?\n    begin\n      block.call(path.dup)\n      if (File.directory?(path)) && (!(File.symlink?(path)))\n        begin\n          children = Dir.children(path)\n        rescue exc : IO::Error\n          if ignore_error\n          else\n            raise(exc)\n          end\n          next\n        end\n        children.map! do |child|\n          File.join(path, child)\n        end\n        children.sort!(&sort_proc)\n        children.reverse_each do |child|\n          ary.unshift(child)\n        end\n      end\n    rescue Walker::Prune\n      next\n    end\n  end\nend\nnil\n"}}],"macros":[],"types":[{"html_id":"dir_walker/Dir/Walker/Prune","path":"Dir/Walker/Prune.html","kind":"class","full_name":"Dir::Walker::Prune","name":"Prune","abstract":false,"superclass":{"html_id":"dir_walker/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"dir_walker/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"dir_walker/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"dir_walker/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"dir_walker","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"dir_walker/Dir/Walker","kind":"module","full_name":"Dir::Walker","name":"Walker"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}]}}